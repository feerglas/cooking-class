---
import Layout from '../layouts/Layout.astro';
import {
  getLangFromUrl,
  getStaticPathsForPage,
  languages,
  // useTranslations,
} from '../i18n/utils';
// import Autocomplete from '../components/Autocomplete/Autocomplete';
import LanguagePicker from '../components/Dropdown/Dropdown';
import Menu from '../components/Menu/Menu';

import { ingredientsData } from '../data/ingredients';
import { prepareIngredientsForAutocomplete } from '../data/dataHelper';
import componentsData from '../data/componentsData';

export const getStaticPaths = getStaticPathsForPage;

const currentLang = getLangFromUrl(Astro.url);
// const t = useTranslations(lang);
const ingredientsRaw = await ingredientsData();
const ingredients = prepareIngredientsForAutocomplete(ingredientsRaw, currentLang);

componentsData.menuCourse.ingredientsSelector.ingredients = ingredients;

const langItems = Object.entries(languages)
  .map(([
    link,
    label,
  ]) => ({
    icon: link,
    label,
    link: `/${link}`,
  }))
  .filter((item) => item.icon !== currentLang);

---

<Layout title="Cooking class generator">
  <main>

    <LanguagePicker
      client:load
      button={{
        color: 'primary',
        iconAfter: false,
        iconBefore: currentLang,
        label: currentLang,
        size: 's',
      }}
      items={langItems}
      radios={false}
    />

    <Menu
      client:load
      {...componentsData}
    />

    <!--
    <Autocomplete
      client:load
      input={{
        closeButton: true,
        dropdown: {
          ...componentsData.ingredientsAutocompleteInputDropdown,
        },
        id: 'ingredients-input',
        label: false,
        placeholder: 'Zutaten durchsuchen',
      }}
      items={ingredients}
    />
    -->

    <!-- <p>new localized index {t('nav.foo')}</p> -->
  </main>
</Layout>
